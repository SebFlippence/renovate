let config;
beforeEach(() => {
  jest.resetAllMocks();
  config = JSON.parse(JSON.stringify(require('../../../_fixtures/config')));
});

const {
  detectVulnerabilityAlerts,
} = require('../../../../lib/workers/repository/init/vulnerability');

describe('workers/repository/init/vulnerability', () => {
  describe('detectVulnerabilityAlerts()', () => {
    it('returns if alerts are missing', async () => {
      delete config.vulnerabilityAlerts;
      expect(await detectVulnerabilityAlerts(config)).toEqual(config);
    });
    it('returns if alerts are disabled', async () => {
      config.vulnerabilityAlerts.enabled = false;
      expect(await detectVulnerabilityAlerts(config)).toEqual(config);
    });
    it('returns if no alerts', async () => {
      delete config.vulnerabilityAlerts.enabled;
      platform.getVulnerabilityAlerts.mockReturnValue([]);
      expect(await detectVulnerabilityAlerts(config)).toEqual(config);
    });
    it('throws if no alerts and vulnerabilityAlertsOnly', async () => {
      config.vulnerabilityAlertsOnly = true;
      platform.getVulnerabilityAlerts.mockReturnValue([]);
      await expect(detectVulnerabilityAlerts(config)).rejects.toThrow(
        /no-vulnerability-alerts/
      );
    });
    it('returns alerts', async () => {
      delete config.vulnerabilityAlerts.enabled;
      platform.getVulnerabilityAlerts.mockReturnValue([
        {},
        {
          dismissReason: 'some reason',
        },
        {
          dismissReason: null,
          vulnerableManifestFilename: 'package-lock.json',
          vulnerableManifestPath: 'package-lock.json',
          vulnerableRequirements: '= 1.8.2',
          securityVulnerability: {
            package: {
              name: 'electron',
              ecosystem: 'NPM',
            },
            firstPatchedVersion: {
              identifier: '1.8.3',
            },
            vulnerableVersionRange: '>= 1.8, < 1.8.3',
          },
        },
        {
          dismissReason: null,
          vulnerableManifestFilename: 'package-lock.json',
          vulnerableManifestPath: 'package-lock.json',
          vulnerableRequirements: '= 1.8.2',
          securityVulnerability: {
            package: {
              name: 'electron',
              ecosystem: 'NPM',
            },
            firstPatchedVersion: {
              identifier: 'abc-1.8.8',
            },
            vulnerableVersionRange: '>= 1.8, < 1.8.8',
          },
        },
        {
          dismissReason: null,
          vulnerableManifestFilename: 'package-lock.json',
          vulnerableManifestPath: 'package-lock.json',
          vulnerableRequirements: '= 1.8.2',
          securityVulnerability: {
            package: {
              name: 'electron',
              ecosystem: 'NPM',
            },
            firstPatchedVersion: {
              identifier: '1.8.8',
            },
            vulnerableVersionRange: '>= 1.8, < 1.8.8',
          },
        },
        {
          dismissReason: null,
          vulnerableManifestFilename: 'requirements.txt',
          vulnerableManifestPath: 'requirements.txt',
          vulnerableRequirements: '== 1.8.2',
          securityVulnerability: {
            package: {
              name: 'ansible',
              ecosystem: 'PIP',
            },
            firstPatchedVersion: {
              identifier: '1.8.8',
            },
            vulnerableVersionRange: '>= 1.8, < 1.8.8',
          },
        },
        {},
      ]);
      const res = await detectVulnerabilityAlerts(config);
      expect(res.packageRules).toMatchSnapshot();
      expect(res.packageRules).toHaveLength(4);
    });
  });
});
